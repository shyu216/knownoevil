import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as l,a as n}from"./app-BRQeDuAq.js";const a={},t=n('<h2 id="_1-indexing" tabindex="-1"><a class="header-anchor" href="#_1-indexing"><span>1. Indexing</span></a></h2><h2 id="_2-sequence-alignment-and-mapping" tabindex="-1"><a class="header-anchor" href="#_2-sequence-alignment-and-mapping"><span>2. Sequence Alignment and Mapping</span></a></h2><h2 id="_3-1-comparing-sequences" tabindex="-1"><a class="header-anchor" href="#_3-1-comparing-sequences"><span>3.1. Comparing Sequences</span></a></h2><ul><li>heuristic: progressive alignment <ol><li>construct a matrix</li><li>construct a guide tree</li><li>align sequences</li></ol></li><li>Basic Local Alignment Search Tool (BLAST) <ul><li>one to many query</li></ul><ol><li>split query into words</li><li>find neighbourhood words of similar words</li><li>collect seeds</li><li>extend seeds</li><li>get the best alignment</li></ol></li><li>kmer</li><li>minhash <ul><li>fingerprint, known as kmers</li><li>big data</li></ul></li><li>Jaccard Coefficient <ul><li>measure the similarity</li><li>proportion</li><li>J(A, B) = |A ∩ B| / |A ∪ B|</li></ul></li><li>minimizers <ul><li>window</li><li>minimizer: select the minimum kmer from a window according to an order</li></ul></li><li>shazam <ul><li>search audio</li><li>audio, fingerprint, hash, reproducible</li></ul></li><li>limitation <ul><li>window size W and kmer size k trade-off</li><li>longer kmer, more informative</li><li>bigger window, more accurate, less efficient</li></ul></li></ul><h2 id="_3-2-graph-theory" tabindex="-1"><a class="header-anchor" href="#_3-2-graph-theory"><span>3.2. Graph Theory</span></a></h2><ul><li>graph, interaction, biology</li><li>describe and analyse relationships</li><li>nodes, edges</li><li>labels, directional, weights</li><li>adjacent, degree</li><li>walk (edge), path (node), cycle (closed path)</li><li>Eulerian path: visit each edge once and only once</li><li>Hamiltonian path: visit each node exactly once, NP-complete</li><li>tree, usually sparse</li><li>clique, edges between all pairs of nodes</li><li>graph, adjacency list, adjacency matrix</li><li>traversals: depth-first search, breadth-first search</li><li>recursion</li></ul><h2 id="_4-1-network-analysis" tabindex="-1"><a class="header-anchor" href="#_4-1-network-analysis"><span>4.1. Network Analysis</span></a></h2><ul><li>connected?</li><li>distance of nodes?</li><li>density?</li><li>diversity of distribution? (node degree distribution)</li><li>centrality <ul><li>degree</li><li>closeness</li><li>betweenness</li><li>eigenvector</li></ul></li><li>classification of networks <ul><li>scale-free</li><li>small-world</li><li>random</li><li>regular</li></ul></li></ul><h2 id="_4-2-advanced-indexing" tabindex="-1"><a class="header-anchor" href="#_4-2-advanced-indexing"><span>4.2. Advanced Indexing</span></a></h2><ul><li>trie (prefix tree or radix tree) <ul><li>used in word retrieval</li></ul></li><li>suffix tree <ul><li>complexity, space</li></ul></li><li>suffix array</li></ul>',10),r=[t];function o(s,c){return l(),e("div",null,r)}const u=i(a,[["render",o],["__file","COMP90014.html.vue"]]),g=JSON.parse('{"path":"/master/COMP90014.html","title":"COMP90014 Algorithms for Bioinformatics","lang":"en-US","frontmatter":{"title":"COMP90014 Algorithms for Bioinformatics","shortTitle":"COMP90014","order":2,"icon":"book-open","category":["UniMelb","24S2"],"tag":["Algorithm","Bioinformatics"],"description":"1. Indexing 2. Sequence Alignment and Mapping 3.1. Comparing Sequences heuristic: progressive alignment construct a matrix construct a guide tree align sequences Basic Local Ali...","head":[["meta",{"property":"og:url","content":"https://shyu216.github.io/knownoevil/knownoevil/master/COMP90014.html"}],["meta",{"property":"og:site_name","content":"Know No Evil"}],["meta",{"property":"og:title","content":"COMP90014 Algorithms for Bioinformatics"}],["meta",{"property":"og:description","content":"1. Indexing 2. Sequence Alignment and Mapping 3.1. Comparing Sequences heuristic: progressive alignment construct a matrix construct a guide tree align sequences Basic Local Ali..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-08-14T07:21:20.000Z"}],["meta",{"property":"article:author","content":"Dale"}],["meta",{"property":"article:tag","content":"Algorithm"}],["meta",{"property":"article:tag","content":"Bioinformatics"}],["meta",{"property":"article:modified_time","content":"2024-08-14T07:21:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"COMP90014 Algorithms for Bioinformatics\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-14T07:21:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dale\\",\\"url\\":\\"https://github.com/shyu216\\"}]}"]]},"headers":[{"level":2,"title":"1. Indexing","slug":"_1-indexing","link":"#_1-indexing","children":[]},{"level":2,"title":"2. Sequence Alignment and Mapping","slug":"_2-sequence-alignment-and-mapping","link":"#_2-sequence-alignment-and-mapping","children":[]},{"level":2,"title":"3.1. Comparing Sequences","slug":"_3-1-comparing-sequences","link":"#_3-1-comparing-sequences","children":[]},{"level":2,"title":"3.2. Graph Theory","slug":"_3-2-graph-theory","link":"#_3-2-graph-theory","children":[]},{"level":2,"title":"4.1. Network Analysis","slug":"_4-1-network-analysis","link":"#_4-1-network-analysis","children":[]},{"level":2,"title":"4.2. Advanced Indexing","slug":"_4-2-advanced-indexing","link":"#_4-2-advanced-indexing","children":[]}],"git":{"createdTime":1722491295000,"updatedTime":1723620080000,"contributors":[{"name":"shyu216","email":"sihong1@student.unimelb.edu.au","commits":5},{"name":"shyu216","email":"yusihong073@gmail.com","commits":1}]},"readingTime":{"minutes":0.84,"words":251},"filePathRelative":"master/COMP90014.md","localizedDate":"August 1, 2024","autoDesc":true,"excerpt":"<h2>1. Indexing</h2>\\n<h2>2. Sequence Alignment and Mapping</h2>\\n<h2>3.1. Comparing Sequences</h2>\\n<ul>\\n<li>heuristic: progressive alignment\\n<ol>\\n<li>construct a matrix</li>\\n<li>construct a guide tree</li>\\n<li>align sequences</li>\\n</ol>\\n</li>\\n<li>Basic Local Alignment Search Tool (BLAST)\\n<ul>\\n<li>one to many query</li>\\n</ul>\\n<ol>\\n<li>split query into words</li>\\n<li>find neighbourhood words of similar words</li>\\n<li>collect seeds</li>\\n<li>extend seeds</li>\\n<li>get the best alignment</li>\\n</ol>\\n</li>\\n<li>kmer</li>\\n<li>minhash\\n<ul>\\n<li>fingerprint, known as kmers</li>\\n<li>big data</li>\\n</ul>\\n</li>\\n<li>Jaccard Coefficient\\n<ul>\\n<li>measure the similarity</li>\\n<li>proportion</li>\\n<li>J(A, B) = |A ∩ B| / |A ∪ B|</li>\\n</ul>\\n</li>\\n<li>minimizers\\n<ul>\\n<li>window</li>\\n<li>minimizer: select the minimum kmer from a window according to an order</li>\\n</ul>\\n</li>\\n<li>shazam\\n<ul>\\n<li>search audio</li>\\n<li>audio, fingerprint, hash, reproducible</li>\\n</ul>\\n</li>\\n<li>limitation\\n<ul>\\n<li>window size W and kmer size k trade-off</li>\\n<li>longer kmer, more informative</li>\\n<li>bigger window, more accurate, less efficient</li>\\n</ul>\\n</li>\\n</ul>"}');export{u as comp,g as data};
