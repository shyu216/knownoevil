import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as e,f as n,a as i,o as t}from"./app-CN86oT9x.js";const r={},o=i('<h2 id="_1-indexing" tabindex="-1"><a class="header-anchor" href="#_1-indexing"><span>1. Indexing</span></a></h2><h2 id="_2-sequence-alignment-and-mapping" tabindex="-1"><a class="header-anchor" href="#_2-sequence-alignment-and-mapping"><span>2. Sequence Alignment and Mapping</span></a></h2><h2 id="_3-1-comparing-sequences" tabindex="-1"><a class="header-anchor" href="#_3-1-comparing-sequences"><span>3.1. Comparing Sequences</span></a></h2><ul><li>heuristic: progressive alignment <ol><li>construct a matrix</li><li>construct a guide tree</li><li>align sequences</li></ol></li><li>Basic Local Alignment Search Tool (BLAST) <ul><li>one to many query</li></ul><ol><li>split query into words</li><li>find neighbourhood words of similar words</li><li>collect seeds</li><li>extend seeds</li><li>get the best alignment</li></ol></li><li>kmer</li><li>minhash <ul><li>fingerprint, known as kmers</li><li>big data</li></ul></li><li>Jaccard Coefficient <ul><li>measure the similarity</li><li>proportion</li><li>J(A, B) = |A ∩ B| / |A ∪ B|</li></ul></li><li>minimizers <ul><li>window</li><li>minimizer: select the minimum kmer from a window according to an order</li></ul></li><li>shazam <ul><li>search audio</li><li>audio, fingerprint, hash, reproducible</li></ul></li><li>limitation <ul><li>window size W and kmer size k trade-off</li><li>longer kmer, more informative</li><li>bigger window, more accurate, less efficient</li></ul></li></ul><h2 id="_3-2-graph-theory" tabindex="-1"><a class="header-anchor" href="#_3-2-graph-theory"><span>3.2. Graph Theory</span></a></h2><ul><li>graph, interaction, biology</li><li>describe and analyse relationships</li><li>nodes, edges</li><li>labels, directional, weights</li><li>adjacent, degree</li><li>walk (edge), path (node), cycle (closed path)</li><li>Eulerian path: visit each edge once and only once</li><li>Hamiltonian path: visit each node exactly once, NP-complete</li><li>tree, usually sparse</li><li>clique, edges between all pairs of nodes</li><li>graph, adjacency list, adjacency matrix</li><li>traversals: depth-first search, breadth-first search</li><li>recursion</li></ul><h2 id="_4-1-network-analysis" tabindex="-1"><a class="header-anchor" href="#_4-1-network-analysis"><span>4.1. Network Analysis</span></a></h2><ul><li>connected?</li><li>distance of nodes?</li><li>density?</li><li>diversity of distribution? (node degree distribution)</li><li>centrality <ul><li>degree</li><li>closeness</li><li>betweenness</li><li>eigenvector</li></ul></li><li>classification of networks <ul><li>scale-free</li><li>small-world</li><li>random</li><li>regular</li></ul></li></ul><h2 id="_4-2-advanced-indexing" tabindex="-1"><a class="header-anchor" href="#_4-2-advanced-indexing"><span>4.2. Advanced Indexing</span></a></h2><ul><li>trie (prefix tree or radix tree) <ul><li>used in word retrieval</li></ul></li><li>suffix tree <ul><li>complexity, space</li></ul></li><li>suffix array</li></ul><h2 id="_5-1-evolutionary-trees" tabindex="-1"><a class="header-anchor" href="#_5-1-evolutionary-trees"><span>5.1. Evolutionary Trees</span></a></h2>',11),s=i("<li>taxonomy 分类学</li><li>phylogenetics 系统发育</li><li>speciation 物种形成</li><li>multiple sequence alignment <ul><li>issue: local not represent global</li></ul></li><li>greedy: pair the most similar sequences</li><li>building a tree <ul><li>next merge</li><li>internal node</li><li>branch length</li></ul></li>",6),c=e("li",null,"unweighted pair group method with arithmetic mean",-1),d={class:"MathJax",jax:"SVG",style:{position:"relative"}},m={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.832ex",height:"2.451ex",role:"img",focusable:"false",viewBox:"0 -833.2 2577.6 1083.2","aria-hidden":"true"},u=i('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1),h=[u],g=e("mjx-assistive-mml",{unselectable:"on",display:"inline"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("mi",null,"O"),e("mo",{stretchy:"false"},"("),e("msup",null,[e("mi",null,"n"),e("mn",null,"3")]),e("mo",{stretchy:"false"},")")])],-1);function p(T,f){return t(),l("div",null,[o,e("ul",null,[s,e("li",null,[n("UPGMA "),e("ul",null,[c,e("li",null,[e("mjx-container",d,[(t(),l("svg",m,h)),g]),n(", n for number of merge, n * n for distance matrix")])])])])])}const _=a(r,[["render",p],["__file","COMP90014.html.vue"]]),w=JSON.parse('{"path":"/master/COMP90014.html","title":"COMP90014 Algorithms for Bioinformatics","lang":"en-US","frontmatter":{"title":"COMP90014 Algorithms for Bioinformatics","shortTitle":"COMP90014","order":2,"icon":"book-open","category":["UniMelb","24S2"],"tag":["Algorithm","Bioinformatics"],"description":"1. Indexing 2. Sequence Alignment and Mapping 3.1. Comparing Sequences heuristic: progressive alignment construct a matrix construct a guide tree align sequences Basic Local Ali...","head":[["meta",{"property":"og:url","content":"https://shyu216.github.io/knownoevil/knownoevil/master/COMP90014.html"}],["meta",{"property":"og:site_name","content":"Know No Evil"}],["meta",{"property":"og:title","content":"COMP90014 Algorithms for Bioinformatics"}],["meta",{"property":"og:description","content":"1. Indexing 2. Sequence Alignment and Mapping 3.1. Comparing Sequences heuristic: progressive alignment construct a matrix construct a guide tree align sequences Basic Local Ali..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-08-22T07:16:05.000Z"}],["meta",{"property":"article:author","content":"Dale"}],["meta",{"property":"article:tag","content":"Algorithm"}],["meta",{"property":"article:tag","content":"Bioinformatics"}],["meta",{"property":"article:modified_time","content":"2024-08-22T07:16:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"COMP90014 Algorithms for Bioinformatics\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-22T07:16:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dale\\",\\"url\\":\\"https://github.com/shyu216\\"}]}"]]},"headers":[{"level":2,"title":"1. Indexing","slug":"_1-indexing","link":"#_1-indexing","children":[]},{"level":2,"title":"2. Sequence Alignment and Mapping","slug":"_2-sequence-alignment-and-mapping","link":"#_2-sequence-alignment-and-mapping","children":[]},{"level":2,"title":"3.1. Comparing Sequences","slug":"_3-1-comparing-sequences","link":"#_3-1-comparing-sequences","children":[]},{"level":2,"title":"3.2. Graph Theory","slug":"_3-2-graph-theory","link":"#_3-2-graph-theory","children":[]},{"level":2,"title":"4.1. Network Analysis","slug":"_4-1-network-analysis","link":"#_4-1-network-analysis","children":[]},{"level":2,"title":"4.2. Advanced Indexing","slug":"_4-2-advanced-indexing","link":"#_4-2-advanced-indexing","children":[]},{"level":2,"title":"5.1. Evolutionary Trees","slug":"_5-1-evolutionary-trees","link":"#_5-1-evolutionary-trees","children":[]}],"git":{"createdTime":1722491295000,"updatedTime":1724310965000,"contributors":[{"name":"shyu216","email":"sihong1@student.unimelb.edu.au","commits":6},{"name":"shyu216","email":"yusihong073@gmail.com","commits":1}]},"readingTime":{"minutes":1.04,"words":312},"filePathRelative":"master/COMP90014.md","localizedDate":"August 1, 2024","autoDesc":true,"excerpt":"<h2>1. Indexing</h2>\\n<h2>2. Sequence Alignment and Mapping</h2>\\n<h2>3.1. Comparing Sequences</h2>\\n<ul>\\n<li>heuristic: progressive alignment\\n<ol>\\n<li>construct a matrix</li>\\n<li>construct a guide tree</li>\\n<li>align sequences</li>\\n</ol>\\n</li>\\n<li>Basic Local Alignment Search Tool (BLAST)\\n<ul>\\n<li>one to many query</li>\\n</ul>\\n<ol>\\n<li>split query into words</li>\\n<li>find neighbourhood words of similar words</li>\\n<li>collect seeds</li>\\n<li>extend seeds</li>\\n<li>get the best alignment</li>\\n</ol>\\n</li>\\n<li>kmer</li>\\n<li>minhash\\n<ul>\\n<li>fingerprint, known as kmers</li>\\n<li>big data</li>\\n</ul>\\n</li>\\n<li>Jaccard Coefficient\\n<ul>\\n<li>measure the similarity</li>\\n<li>proportion</li>\\n<li>J(A, B) = |A ∩ B| / |A ∪ B|</li>\\n</ul>\\n</li>\\n<li>minimizers\\n<ul>\\n<li>window</li>\\n<li>minimizer: select the minimum kmer from a window according to an order</li>\\n</ul>\\n</li>\\n<li>shazam\\n<ul>\\n<li>search audio</li>\\n<li>audio, fingerprint, hash, reproducible</li>\\n</ul>\\n</li>\\n<li>limitation\\n<ul>\\n<li>window size W and kmer size k trade-off</li>\\n<li>longer kmer, more informative</li>\\n<li>bigger window, more accurate, less efficient</li>\\n</ul>\\n</li>\\n</ul>"}');export{_ as comp,w as data};
