import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as t,f as i}from"./app-Dit9sr0-.js";const r={},n=i('<h1 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h1><h1 id="advanced-algorithms-and-data-structurectures" tabindex="-1"><a class="header-anchor" href="#advanced-algorithms-and-data-structurectures"><span>Advanced Algorithms and Data Structurectures</span></a></h1><div class="hint-container tip"><p class="hint-container-title">Readings</p><ol><li><a href="https://www.cs.princeton.edu/~wayne/kleinberg-tardos/" target="_blank" rel="noopener noreferrer">Algorithm Design by Kleinberg and Tardos</a></li><li><a href="https://jeffe.cs.illinois.edu/teaching/algorithms/book/Algorithms-JeffE.pdf" target="_blank" rel="noopener noreferrer">Algorithms by Jeff Erickson</a></li><li><a href="https://jeffe.cs.illinois.edu/teaching/algorithms/notes/H-lp.pdf" target="_blank" rel="noopener noreferrer">Linear Programming</a></li><li><a href="https://www.designofapproxalgs.com/book.pdf" target="_blank" rel="noopener noreferrer">Design of Approximation Algorithms</a></li></ol></div><h2 id="_1-treap" tabindex="-1"><a class="header-anchor" href="#_1-treap"><span>1. Treap</span></a></h2><ul><li>tree + heap</li></ul><h2 id="_2-admortized-analysis" tabindex="-1"><a class="header-anchor" href="#_2-admortized-analysis"><span>2. Admortized Analysis</span></a></h2><ul><li>always have balance</li><li>prepaid</li><li>potential</li></ul><h2 id="_3-quake-heap" tabindex="-1"><a class="header-anchor" href="#_3-quake-heap"><span>3. Quake Heap</span></a></h2><ul><li>x tournament trees</li></ul><h2 id="_4-splay-tree" tabindex="-1"><a class="header-anchor" href="#_4-splay-tree"><span>4. Splay Tree</span></a></h2><ul><li>splay after every operation</li><li>practical somehow</li></ul><h2 id="_5-hashing" tabindex="-1"><a class="header-anchor" href="#_5-hashing"><span>5. Hashing</span></a></h2><ul><li>usually static/fixed size</li><li>perfect hashing: two-level hashing ensuring no collision</li><li>cuckoo hashing: x hash functions, allowing insertion</li></ul><h2 id="_6-range-tree" tabindex="-1"><a class="header-anchor" href="#_6-range-tree"><span>6. Range Tree</span></a></h2><ul><li>multidimension sort</li></ul><h2 id="_7-min-cut-max-flow" tabindex="-1"><a class="header-anchor" href="#_7-min-cut-max-flow"><span>7. Min Cut/Max Flow</span></a></h2><ul><li>adjacency list</li><li>union find</li><li>matching</li><li>bipartite graph</li></ul><h2 id="_8-linear-programming" tabindex="-1"><a class="header-anchor" href="#_8-linear-programming"><span>8. Linear Programming</span></a></h2><ul><li>given a set of linear inequalities, find the maximum/minimum value of a linear function</li><li>vertex cover</li><li>set cover</li><li>factor-x approximation</li><li>duality</li></ul>',19),l=[n];function o(s,h){return t(),a("div",null,l)}const d=e(r,[["render",o],["__file","COMP90077.html.vue"]]),m=JSON.parse('{"path":"/master/COMP90077.html","title":"COMP90077","lang":"en-US","frontmatter":{"title":"COMP90077","icon":"book-open","category":["UniMelb","24S1"],"tag":["Data Structures and","Algorithm","Graph Theory"],"description":"Advanced Algorithms and Data Structurectures Readings Algorithm Design by Kleinberg and Tardos Algorithms by Jeff Erickson Linear Programming Design of Approximation Algorithms ...","head":[["meta",{"property":"og:url","content":"https://shyu216.github.io/knownoevil/knownoevil/master/COMP90077.html"}],["meta",{"property":"og:site_name","content":"Know No Evil"}],["meta",{"property":"og:title","content":"COMP90077"}],["meta",{"property":"og:description","content":"Advanced Algorithms and Data Structurectures Readings Algorithm Design by Kleinberg and Tardos Algorithms by Jeff Erickson Linear Programming Design of Approximation Algorithms ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-08-01T05:48:15.000Z"}],["meta",{"property":"article:author","content":"Dale"}],["meta",{"property":"article:tag","content":"Data Structures and"}],["meta",{"property":"article:tag","content":"Algorithm"}],["meta",{"property":"article:tag","content":"Graph Theory"}],["meta",{"property":"article:modified_time","content":"2024-08-01T05:48:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"COMP90077\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-01T05:48:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dale\\",\\"url\\":\\"https://github.com/shyu216\\"}]}"]]},"headers":[{"level":2,"title":"1. Treap","slug":"_1-treap","link":"#_1-treap","children":[]},{"level":2,"title":"2. Admortized Analysis","slug":"_2-admortized-analysis","link":"#_2-admortized-analysis","children":[]},{"level":2,"title":"3. Quake Heap","slug":"_3-quake-heap","link":"#_3-quake-heap","children":[]},{"level":2,"title":"4. Splay Tree","slug":"_4-splay-tree","link":"#_4-splay-tree","children":[]},{"level":2,"title":"5. Hashing","slug":"_5-hashing","link":"#_5-hashing","children":[]},{"level":2,"title":"6. Range Tree","slug":"_6-range-tree","link":"#_6-range-tree","children":[]},{"level":2,"title":"7. Min Cut/Max Flow","slug":"_7-min-cut-max-flow","link":"#_7-min-cut-max-flow","children":[]},{"level":2,"title":"8. Linear Programming","slug":"_8-linear-programming","link":"#_8-linear-programming","children":[]}],"git":{"createdTime":1722491295000,"updatedTime":1722491295000,"contributors":[{"name":"shyu216","email":"sihong1@student.unimelb.edu.au","commits":1}]},"readingTime":{"minutes":0.47,"words":142},"filePathRelative":"master/COMP90077.md","localizedDate":"August 1, 2024","autoDesc":true}');export{d as comp,m as data};
