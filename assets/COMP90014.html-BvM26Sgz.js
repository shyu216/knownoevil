import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as i,e as n,a as l,o as t}from"./app-BzQXq5ax.js";const r={},o=l('<h2 id="_1-indexing" tabindex="-1"><a class="header-anchor" href="#_1-indexing"><span>1. Indexing</span></a></h2><ul><li>common classes of algorithms <ul><li>brute force</li><li>divide and conquer</li><li>recursive</li><li>dynamic programming</li><li>greedy</li></ul></li><li>data in bioinformatics <ul><li>FASTA, sequence, genome</li><li>FASTQ, with quality, read</li><li>BAM/SAM, alignment</li><li>Matrix</li><li>VCF, genetic variants</li></ul></li><li>data type <ul><li>primitives: int, float, char</li><li>collections: array, list, set, map</li><li>derived types: class, enum, tuple</li></ul></li><li>data structure <ul><li>arrangement of data in algorithm</li><li>queue, stack, heap, tree, graph</li></ul></li><li>evaluation <ul><li>correctness</li><li>efficiency</li><li>asymptotic complexity 渐近复杂度 (big O notation)</li><li>tractability 可解性 (P, NP, NP-complete)</li></ul></li><li>when complex <ul><li>heuristic</li><li>approximation</li></ul></li><li>indexing <ul><li>pattern matching</li><li>see if something exists</li><li>linear search O(n)</li><li>binary search O(log n)</li><li>hash table O(1)</li></ul></li><li>double hashing (perfect hashing): use another hash function to treat collision</li><li>kmer <ul><li>breaking sequence into smaller pieces</li><li>key of genomic data in indexing</li></ul></li></ul><h2 id="_2-sequence-alignment-and-mapping" tabindex="-1"><a class="header-anchor" href="#_2-sequence-alignment-and-mapping"><span>2. Sequence Alignment and Mapping</span></a></h2><ul><li>why align sequence <ul><li>compare sequence</li><li>assess similarity</li><li>find evolutionary relationships</li><li>identify functionally conserved sequences</li><li>homology 同源性，指不同生物体的基因或蛋白质序列由于共同的祖先而具有相似性，有助于理解生物进化、基因功能和结构 <ul><li>homologs 同源基因</li><li>orthologs 直系 separated by speciation</li><li>paralogs 旁系 separated by duplication</li></ul></li><li>phylogeny 系统发育 infer the evolutionary relationships among sequences</li><li>protein function, find regions of known function, infer function</li><li>conservation, find conserved regions 在不同物种或不同基因组中，某些基因或蛋白质序列在进化过程中保持不变或变化很小的区域，通常这些序列在生物学功能上具有重要性</li><li>data searching</li><li>de novo assembly, reconstruct the original sequence</li><li>read mapping, infer variants</li></ul></li><li>how to align <ul><li>pairwise</li><li>BLAST</li></ul></li><li>Hamming distance <ul><li>for equal length sequences, count the number of different characters</li></ul></li><li>kmer distance <ul><li>for unequal length sequences, count the number of different kmers</li></ul></li><li>Levenshtein distance (pairwise) <ul><li>edit distance</li><li>最小编辑距离，指两个字符串之间，由一个转换成另一个所需的最少编辑操作次数</li><li>count mismatch, insertion, deletion as transformations</li><li>argmin of <ul><li>(i-1, j-1) + (missmatch 1 or match 0)</li><li>(i-1, j) + (gap 1)</li><li>(i, j-1) + (gap 1)</li></ul></li><li>return the bottom-right cell of the matrix</li></ul></li><li>pairwise distance with penalties <ul><li>apply penalties <ul><li>i.e. match 0, mismatch -1, gap -2</li></ul></li><li>return the bottom-right cell of the matrix</li></ul></li><li>Needleman-Wunsch algorithm (global) <ul><li>return the bottom-right cell of the matrix</li></ul></li><li>Smith-Waterman algorithm (local) <ul><li>return the maximum value in the matrix</li></ul></li><li>semi-global alignment <ul><li>clipped by best offset</li><li>Needleman-Wunsch variant <ul><li>start from max cell, end at reaching top row/left column</li></ul></li></ul></li><li>(scoring) substitution matrix 替换矩阵 <ul><li>assign scores to each pair of characters</li><li>why not use fixed scores <ul><li>two types of DNA mutations 两种DNA突变 <ul><li>transition, purine to purine or pyrimidine to pyrimidine, frequently (A↔G, C↔T)</li><li>transversion, purine to pyrimidine or vice versa, less likely (A↔C, A↔T, G↔C, G↔T)</li></ul></li></ul></li><li>it reflect <ul><li>chemical similarity</li><li>observed mutation frequencies</li><li>how proteins sequence evolve</li></ul></li></ul></li><li>Point Accepted Mutation (PAM) matrix <ul><li>the number represents the evolutionary distance between the sequences</li><li>higher numbers denote greater distances</li><li>limitation <ul><li>only for closely related sequences and small dataset</li><li>not consider different rates of evolution</li></ul></li></ul></li><li>BLOcks SUbstitution Matrix (BLOSUM) matrix <ul><li>scores derived from frequencies of substitutions in blocks of ungapped local alignments</li><li>BLOSUM62: 62% identity</li></ul></li><li>gap panalty <ul><li>negative score</li><li>fixed / affine</li></ul></li><li>read mapping <ul><li>seed extension <ul><li>combine indexing and alignment</li><li>process <ol><li>index kmer</li><li>find seed</li><li>extend seed using alignment</li><li>return best</li></ol></li></ul></li><li>seed chain align <ul><li>for long, noisy sequences</li><li>process <ol><li>find seeds</li><li>identify colinear chains</li><li>base-level alignments to fill gaps</li><li>return best</li></ol></li></ul></li></ul></li><li>Basic Local Alignment Search Tool (BLAST) <ul><li>efficient heuristic <ul><li>DNA translated to protein seq for use <ul><li>Amino Acid (AA) sequences more conserved than DNA</li><li>degeneracy / codon wobble</li><li>3rd base in codon: multiple different nucleotides encode same AA</li><li>eliminate unnecessary DNA mismatches</li><li>more useful kmer hits</li></ul></li><li>low-complexity regions removed <ul><li>repetitive DNA</li></ul></li><li>exploit kmer <ul><li>generate &#39;neighbors&#39;</li><li>allow mismatches</li><li>ungapped alignment and pick with threshold</li></ul></li><li>identify nearby hits on same diagonal <ul><li>like seed chain align</li><li>extend region to a high-scoring segment pair (HSP)</li></ul></li></ul></li></ul></li></ul><h2 id="_3-1-comparing-sequences" tabindex="-1"><a class="header-anchor" href="#_3-1-comparing-sequences"><span>3.1. Comparing Sequences</span></a></h2><ul><li>heuristic: progressive alignment <ol><li>construct a matrix</li><li>construct a guide tree</li><li>align sequences</li></ol></li><li>Basic Local Alignment Search Tool (BLAST) <ul><li>one to many query</li></ul><ol><li>split query into words</li><li>find neighbourhood words of similar words</li><li>collect seeds</li><li>extend seeds</li><li>get the best alignment</li></ol></li><li>kmer</li><li>minhash <ul><li>fingerprint, known as kmers</li><li>big data</li></ul></li><li>Jaccard Coefficient <ul><li>measure the similarity</li><li>proportion</li><li>J(A, B) = |A ∩ B| / |A ∪ B|</li></ul></li><li>minimizers <ul><li>window</li><li>minimizer: select the minimum kmer from a window according to an order</li></ul></li><li>shazam <ul><li>search audio</li><li>audio, fingerprint, hash, reproducible</li></ul></li><li>limitation <ul><li>window size W and kmer size k trade-off</li><li>longer kmer, more informative</li><li>bigger window, more accurate, less efficient</li></ul></li></ul><h2 id="_3-2-graph-theory" tabindex="-1"><a class="header-anchor" href="#_3-2-graph-theory"><span>3.2. Graph Theory</span></a></h2><ul><li>graph, interaction, biology</li><li>describe and analyse relationships</li><li>nodes, edges</li><li>labels, directional, weights</li><li>adjacent, degree</li><li>walk (edge), path (node), cycle (closed path)</li><li>Eulerian path: visit each edge once and only once</li><li>Hamiltonian path: visit each node exactly once, NP-complete</li><li>tree, usually sparse</li><li>clique, edges between all pairs of nodes</li><li>graph, adjacency list, adjacency matrix</li><li>traversals: depth-first search, breadth-first search</li><li>recursion</li></ul><h2 id="_4-1-network-analysis" tabindex="-1"><a class="header-anchor" href="#_4-1-network-analysis"><span>4.1. Network Analysis</span></a></h2><ul><li>connected?</li><li>distance of nodes?</li><li>density?</li><li>diversity of distribution? (node degree distribution)</li><li>centrality <ul><li>degree</li><li>closeness</li><li>betweenness</li><li>eigenvector</li></ul></li><li>classification of networks <ul><li>scale-free</li><li>small-world</li><li>random</li><li>regular</li></ul></li></ul><h2 id="_4-2-advanced-indexing" tabindex="-1"><a class="header-anchor" href="#_4-2-advanced-indexing"><span>4.2. Advanced Indexing</span></a></h2><ul><li>trie (prefix tree or radix tree) <ul><li>used in word retrieval</li></ul></li><li>suffix tree <ul><li>complexity, space</li></ul></li><li>suffix array</li></ul><h2 id="_5-evolutionary-trees" tabindex="-1"><a class="header-anchor" href="#_5-evolutionary-trees"><span>5. Evolutionary Trees</span></a></h2>',13),s=l("<li>taxonomy 分类学</li><li>phylogenetics 系统发育</li><li>speciation 物种形成</li><li>multiple sequence alignment <ul><li>issue: local not represent global</li></ul></li><li>greedy: pair the most similar sequences</li><li>building a tree <ul><li>next merge</li><li>internal node</li><li>branch length</li></ul></li>",6),c=i("li",null,"unweighted pair group method with arithmetic mean",-1),u={class:"MathJax",jax:"SVG",style:{position:"relative"}},m={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.832ex",height:"2.451ex",role:"img",focusable:"false",viewBox:"0 -833.2 2577.6 1083.2","aria-hidden":"true"},d=l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1),h=[d],g=i("mjx-assistive-mml",{unselectable:"on",display:"inline"},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",null,"O"),i("mo",{stretchy:"false"},"("),i("msup",null,[i("mi",null,"n"),i("mn",null,"3")]),i("mo",{stretchy:"false"},")")])],-1);function p(f,y){return t(),e("div",null,[o,i("ul",null,[s,i("li",null,[n("UPGMA "),i("ul",null,[c,i("li",null,[i("mjx-container",u,[(t(),e("svg",m,h)),g]),n(", n for number of merge, n * n for distance matrix")])])])])])}const Q=a(r,[["render",p],["__file","COMP90014.html.vue"]]),b=JSON.parse('{"path":"/master/COMP90014.html","title":"COMP90014 Algorithms for Bioinformatics","lang":"en-US","frontmatter":{"title":"COMP90014 Algorithms for Bioinformatics","shortTitle":"COMP90014","order":2,"icon":"book-open","category":["UniMelb","24S2"],"tag":["Algorithm","Bioinformatics"],"description":"1. Indexing common classes of algorithms brute force divide and conquer recursive dynamic programming greedy data in bioinformatics FASTA, sequence, genome FASTQ, with quality, ...","head":[["meta",{"property":"og:url","content":"https://shyu216.github.io/knownoevil/knownoevil/master/COMP90014.html"}],["meta",{"property":"og:site_name","content":"Know No Evil"}],["meta",{"property":"og:title","content":"COMP90014 Algorithms for Bioinformatics"}],["meta",{"property":"og:description","content":"1. Indexing common classes of algorithms brute force divide and conquer recursive dynamic programming greedy data in bioinformatics FASTA, sequence, genome FASTQ, with quality, ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-08-30T04:52:47.000Z"}],["meta",{"property":"article:author","content":"Dale"}],["meta",{"property":"article:tag","content":"Algorithm"}],["meta",{"property":"article:tag","content":"Bioinformatics"}],["meta",{"property":"article:modified_time","content":"2024-08-30T04:52:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"COMP90014 Algorithms for Bioinformatics\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-30T04:52:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dale\\",\\"url\\":\\"https://github.com/shyu216\\"}]}"]]},"headers":[{"level":2,"title":"1. Indexing","slug":"_1-indexing","link":"#_1-indexing","children":[]},{"level":2,"title":"2. Sequence Alignment and Mapping","slug":"_2-sequence-alignment-and-mapping","link":"#_2-sequence-alignment-and-mapping","children":[]},{"level":2,"title":"3.1. Comparing Sequences","slug":"_3-1-comparing-sequences","link":"#_3-1-comparing-sequences","children":[]},{"level":2,"title":"3.2. Graph Theory","slug":"_3-2-graph-theory","link":"#_3-2-graph-theory","children":[]},{"level":2,"title":"4.1. Network Analysis","slug":"_4-1-network-analysis","link":"#_4-1-network-analysis","children":[]},{"level":2,"title":"4.2. Advanced Indexing","slug":"_4-2-advanced-indexing","link":"#_4-2-advanced-indexing","children":[]},{"level":2,"title":"5. Evolutionary Trees","slug":"_5-evolutionary-trees","link":"#_5-evolutionary-trees","children":[]}],"git":{"createdTime":1722491295000,"updatedTime":1724993567000,"contributors":[{"name":"shyu216","email":"sihong1@student.unimelb.edu.au","commits":7},{"name":"shyu216","email":"yusihong073@gmail.com","commits":1}]},"readingTime":{"minutes":3.46,"words":1039},"filePathRelative":"master/COMP90014.md","localizedDate":"August 1, 2024","autoDesc":true,"excerpt":"<h2>1. Indexing</h2>\\n<ul>\\n<li>common classes of algorithms\\n<ul>\\n<li>brute force</li>\\n<li>divide and conquer</li>\\n<li>recursive</li>\\n<li>dynamic programming</li>\\n<li>greedy</li>\\n</ul>\\n</li>\\n<li>data in bioinformatics\\n<ul>\\n<li>FASTA, sequence, genome</li>\\n<li>FASTQ, with quality, read</li>\\n<li>BAM/SAM, alignment</li>\\n<li>Matrix</li>\\n<li>VCF, genetic variants</li>\\n</ul>\\n</li>\\n<li>data type\\n<ul>\\n<li>primitives: int, float, char</li>\\n<li>collections: array, list, set, map</li>\\n<li>derived types: class, enum, tuple</li>\\n</ul>\\n</li>\\n<li>data structure\\n<ul>\\n<li>arrangement of data in algorithm</li>\\n<li>queue, stack, heap, tree, graph</li>\\n</ul>\\n</li>\\n<li>evaluation\\n<ul>\\n<li>correctness</li>\\n<li>efficiency</li>\\n<li>asymptotic complexity 渐近复杂度 (big O notation)</li>\\n<li>tractability 可解性 (P, NP, NP-complete)</li>\\n</ul>\\n</li>\\n<li>when complex\\n<ul>\\n<li>heuristic</li>\\n<li>approximation</li>\\n</ul>\\n</li>\\n<li>indexing\\n<ul>\\n<li>pattern matching</li>\\n<li>see if something exists</li>\\n<li>linear search O(n)</li>\\n<li>binary search O(log n)</li>\\n<li>hash table O(1)</li>\\n</ul>\\n</li>\\n<li>double hashing (perfect hashing): use another hash function to treat collision</li>\\n<li>kmer\\n<ul>\\n<li>breaking sequence into smaller pieces</li>\\n<li>key of genomic data in indexing</li>\\n</ul>\\n</li>\\n</ul>"}');export{Q as comp,b as data};
